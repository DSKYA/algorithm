DCI
在远离互联网中心的地方新建了服务器集群（为什么远离互联网中心？因为便宜），这些服务器集群组成了云，这些服务器之间要传数据所以接了不少线，可是老式的接线结构（ip网络）中有线的利用率不高的缺点（老式ip网络是自动控制报文转发），所以就大改特改，人为加了一堆控制功能来控制报文转发。这个全新的网络方式叫DCI。
​​​​​​​RR+方案
上层业务会受下层网络状况影响，比如说下层网络有3条路，1号的长度最短，人人都想走1号（这是ip网络自动设定的策略），然后1号堵了，人人都走不了。又或者1号收费很贵，而我们可以去2,3号路（为了省钱，这个策略我们可以修改，但是手工操作很麻烦）。所以我们要推翻以前ip网络自动设定的种种策略，由我们开发一个组件来随时修改这些策略，这个组件就是RR+方案。
PCE+方案
和RR+方案类似，只不过RR+是为了修改AS间数据传递的策略，而PCE+则是为了修改AS内的数据专递策略。ip网络数据传递遵循最短路径的策略（每条路经过节点的个数算长度，最短路径自动计算），所以我们在每个节点（路由器）上装个PCE client，然后再安装一个总的PCE server，让server收集信息，来计算由一个client怎么到另一个client，计算好了就建立lsp隧道直接传数据。

13年的时候，12306网站还没有改版，我写了一个抢票器，抢票器用来干啥大家都知道。效果不错，至少能抢上票，解决了假期回不了家的问题。现在12306改版了，验证码无法提前获取到了，所以以前那个抢票器现在也不好使了。

那我就来详细介绍下细节吧，众所周知，一个网站，购买点东西，尤其是限量的那种一定会有验证码。老式的那种验证方式比较简单，数字识别，或者是字母识别，难点的就是汉字，不论哪种他都会有两个明显的特点，第一个是验证码的有效期是60s，第二个是服务器一定有一个专门生成验证码的服务（有些甚至找其他的公司做这个事），那么重点来了，生成的验证码在服务器端是怎样存储的呢，用户发送出去的验证码又是怎样验证的呢？

我有三种想法，第一种是服务器端的验证码的答案存在session里，验证的时候js直接验证就行，缺点很明显：跳转页面就意味着验证码失效，所以不太可能采用。第二种把验证码的答案存在cookie里，然后set-cookie。验证时js直接读cookie验证，缺点也很明显：无法同时处理两个验证码。那么第三种方案（12306也是这样做的），将验证码的答案存在后台服务器的内存里，然后接受用户提交的页面，将验证码传给后台去验证。这种模式下会出现另外一个问题，这个验证码答案在后台该如何存呢？

最基本的想法就是把这个答案hash，存hash表里。但是相同的答案有很多，不能A的验证码让B也能验证吧，所以还得把用户ID也一起hash了，但是貌似还不够，还有60s有效期的问题，这个具体怎么解决我没有细细思考，因为我后面要做的不用考虑这个。一般网站到这种程度也就够了，能应付大部分正常用户。但是我就喜欢钻空子，上面的模式中有个最大的漏洞，验证码并没有和业务绑定，用12306的举例就是，我买到长春的票刷个验证码出来，这个验证码我不通过浏览器而是通过我的程序直接构造数据包，内容是买去北京的票，再加上刚才长春的验证码就能直接买去北京的票。所以我的程序有三个步骤：1）提前30s获取验证码，2）自动填写验证码，构造好数据包，3）差5S时间隔发包（还要牵扯12306服务器的策略探测部分我就不细讲了，没地方了）。

程序原理说到这，再来说说为什么现在不行了，以前的验证码是在post参数中输入一串英文就行，现在改成了移动图片，js动态验证和业务绑定了，所以老法子行不通了，嘛大致就讲到这里吧。

要来详细数据进行分析，对用户按地区分类，按年龄，按性别分类，对比前天的数据进行统计，查明究竟是地区，年龄，性别等什么因素在影响活跃用户数量，然后分析活跃用户降低的原因。再结合当天的客观因素，如天气，是否是节日等因素分析原因。原因实在无法探明的情况下，让其等两天看看情况，同时制作反馈調查，发送出去，获取更多有用信息，調查应用市场是否出现同类产品。然后告知他做好最坏打算，要是他不好好干，活跃度以后上不来的话，就卷铺盖走人，对其施加压力。

客观：海外市场有潜力，能继续拓展业务，有发展空间，上市了，有资金储备，有底气，内力雄厚。
主观：刚上市，有钱。

https://github.com/DSKYA
